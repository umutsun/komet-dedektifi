/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
*/
import React, { useEffect, useState } from 'react';
import { WifiIcon } from '../icons';

const LaserSignal: React.FC<{ isProcessing: boolean }> = ({ isProcessing }) => {
    const [speed, setSpeed] = useState<number | null>(null);
    const [isOnline, setIsOnline] = useState(navigator.onLine);

    useEffect(() => {
        const handleOnline = () => setIsOnline(true);
        const handleOffline = () => setIsOnline(false);

        window.addEventListener('online', handleOnline);
        window.addEventListener('offline', handleOffline);

        let intervalId: number;

        const updateSpeed = () => {
            if (!navigator.onLine) {
                setSpeed(null); // Set to null when offline
                return;
            }

            let currentSpeed = 485.12; // Fallback speed in case connection API is not available
            try {
                // Use `any` to bypass potential typescript errors for non-standard property
                const connection = (navigator as any).connection;
                if (connection && connection.downlink) {
                    // Thematic conversion: 1 Mbps downlink = 1.2 THz laser frequency
                    currentSpeed = connection.downlink * 1.2;
                }
                // Add more jitter to make it look more real-time, especially when processing
                const jitterMultiplier = isProcessing ? 0.3 : 0.05;
                const jitter = (Math.random() - 0.5) * (currentSpeed * jitterMultiplier);
                setSpeed(currentSpeed + jitter);
            } catch (error) {
                console.warn('Could not read connection speed, using fallback.', error);
                setSpeed(currentSpeed);
            }
        };
        
        updateSpeed();
        // Update speed more frequently when processing
        intervalId = window.setInterval(updateSpeed, isProcessing ? 200 : 1000);

        return () => {
            window.removeEventListener('online', handleOnline);
            window.removeEventListener('offline', handleOffline);
            clearInterval(intervalId);
        };
    }, [isProcessing]);

    const textColor = isOnline ? (isProcessing ? 'text-blue-300 animate-pulse' : 'text-blue-300') : 'text-red-500 animate-pulse';
    const textContent = isOnline 
        ? (speed !== null ? `${speed.toFixed(2)} THz` : '---.-- THz')
        : 'BAĞLANTI KESİLDİ';

    return (
        <div className="relative w-full h-full flex items-center justify-center">
            <svg viewBox="0 0 100 20" preserveAspectRatio="none" className="absolute w-full h-full">
                <path 
                  d="M0,10 C20,0 40,20 60,10 S80,0 100,10" 
                  stroke={isOnline ? (isProcessing ? "rgba(96, 165, 250, 0.9)" : "rgba(59, 130, 246, 0.5)") : "rgba(239, 68, 68, 0.5)"} 
                  fill="none" 
                  strokeWidth={isProcessing ? 1.5 : 1} 
                  className={isProcessing && isOnline ? 'animate-transmit' : ''}
                />
            </svg>
            <div className={`flex items-center gap-1.5 ${textColor}`}>
                <WifiIcon className="w-3.5 h-3.5" />
                <p className="text-[0.625rem] font-mono tracking-tighter whitespace-nowrap">
                    {textContent}
                </p>
            </div>
        </div>
    );
};

const DataTransmission: React.FC = () => (
    <div className="inline-flex items-center justify-center space-x-0.5 h-4 align-middle">
        {[...Array(5)].map((_, i) => (
            <div key={i} className="w-1 h-3 bg-blue-500 animate-pulse" style={{ animationDelay: `${i * 100}ms` }}></div>
        ))}
    </div>
);

const SystemWarning: React.FC = () => (
    <div className="inline-flex items-center justify-center w-16 h-4 align-middle">
        <div className="w-3 h-3 border-2 border-red-500 animate-ping absolute opacity-75 rounded-full"></div>
        <div className="w-2 h-2 bg-red-500 rounded-full"></div>
        <span className="text-xs text-red-400 ml-2">SİSTEM_UYARISI</span>
    </div>
);

export const GraphicRenderer: React.FC<{ type: string }> = ({ type }) => {
  switch (type) {
    case 'laser-scan':
      // This graphic is no longer generated by HAL but is kept for potential future use.
      return null;
    case 'data-transmission':
      return <DataTransmission />;
    case 'system-warning':
      return <SystemWarning />;
    default:
      return null;
  }
};

export const HeaderSignal: React.FC<{ isProcessing: boolean }> = ({ isProcessing }) => <LaserSignal isProcessing={isProcessing} />;